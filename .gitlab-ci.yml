# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
    - apt-get update -y
    - apt-get install cmake pkg-config -y
    - apt-get install mesa-utils libglu1-mesa-dev freeglut3-dev mesa-common-dev -y
    - apt-get install libglew-dev libglfw3-dev libglm-dev -y
    - apt-get install libao-dev libmpg123-dev -y
    - apt-get install ffmpeg libsm6 libxext6  -y
    - cd Source
  script:
    - pwd
    - make all TEST_MODE?=TEST

  artifacts:
    paths:
      - Source/test.out
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
test:
  stage: test

  before_script:
    - apt-get update && apt-get install libgl1

  script:
    - cd Source
    - LD_LIBRARY_PATH=/usr/local/lib:/builds/szofttech-ab-2023/group-05/philosophers/Dep/raylib/lib
    - export LD_LIBRARY_PATH
    - ldconfig
    - ./test.out

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
